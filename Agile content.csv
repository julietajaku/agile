Date,Author,Question,Answer,URL
10/5/2017,Julieta Jakubowicz,What questions should I ask to see if a story is ready?,What adjustments do we want to make? How will we want to use it?,https://www.agilealliance.org/glossary/definition-of-ready/
10/5/2017,Julieta Jakubowicz,What are Personas?,"When the project calls for it - for instance when user experience is a major factor in project outcomes - the team crafts detailed, synthetic biographies of fictitious users of the future product: these are called ""personas"". (In Alan Cooper's concise terms: ""make up pretend users and design for them"".) Personas are concise and visual; a common layout is a single page including a photograph (from stock shots or magazine cutouts), a name and social or professional details: ""Amanda Jones, 34, press officer at a major food retailing organization, etc."" As a software product is generally intended for use by more than one category of person, with potentially different preferences and expectations of the product, the team creates one persona for each category it deems important to serve well. The biographies are displayed in the team room.",https://www.agilealliance.org/glossary/personas/
10/5/2017,Julieta Jakubowicz,What are some common pitfalls of Personas?,"Personas should not be confused with other conceptual tools used in defining software requirements or in product marketing: -- they are not ""user roles"" (such as sales person, administrator, etc.) primarily defined in terms of tasks or job descriptions; personas put the emphasis on goals and behaviours -- they are not ""market segments"" (such as ""18-25s who exercise"") primarily defined in term of demographic attributes; personas are users rather than buyers.",https://www.agilealliance.org/glossary/personas/
10/5/2017,Julieta Jakubowicz,What are some common pitfalls of Retrospectives?,"Retrospectives should generally be facilitated by someone external to the team rather than one of the members, managers or stakeholders; someone with a vested interest in the project's outcomes would find it difficult to both facilitate discussions impartially and take part in them. The main concerns in a milestone retrospective are different than those of an iteration retrospective, and may have broader impact: they include the long-term or strategic viability of the project, healthy work relationships among team members, or governance concerns, while iteration retrospectives tend to focus on concrete and tactical matters.",https://www.agilealliance.org/glossary/milestone-retrospective/
10/5/2017,Julieta Jakubowicz,What are some common pitfalls of Stand-up (Daily Scrum)?,"perhaps the most common mistake is to turn the daily meeting into a ""status report"" with each member reporting progress to the same person (the team's manager, or the appointed Scrum Master) - exchanges in the daily meeting should be on a peer-to-peer basis -- a second common pitfall is a daily meeting which drags on and on; this is easy to address with a modicum of facilitation skills -- a third common issue is a team finding little value in the daily meeting, to the point where people will ""forget"" to have it unless the Scrum Master or project manager takes the initiative; this often reveals a lukewarm commitment to Agile -- one final common symptom: the ""no problem"" meeting, where no team member ever raises obstacles (""impediments"" in Scrum parlance), even though the team is manifestly not delivering peak performance; this is sometimes an indication that the corporate culture makes people uncomfortable with discussing difficulties in a group setting.",https://www.agilealliance.org/glossary/daily-meeting/
10/5/2017,Julieta Jakubowicz,What are some common pitfalls of Teams?,"the most elementary error is to equate ""group"" and ""team"", to think that a team results automatically from having people work together -- a team should have at least three people (two is a pair), and will generally not exceed ten or so -- a single person may be a contributor to more than one ""project"" simultaneously, but it is highly unlikely that they will consider themselves as belonging to more than one ""team"" at the same time",https://www.agilealliance.org/glossary/team/
10/5/2017,Julieta Jakubowicz,What are some common pitfalls of User Stories?,"A classic mistake consists, in teams where the Agile approach is confined to the development team or adopted after a non-Agile requirements phase, to start from a requirements document in narrative format and derive user stories directly based on its structure: for instance one story for each section of the document. -- As the 3 C's model emphasizes, a user story is not a document; the term encompasses all of the knowledge required to transform a version V of the product into version V' which is more valuable with respect to a particular goal -- The level of detail corresponding to a user story is not constant, it evolves over time as a function of the ""planning horizon""; for instance a user story which is scheduled for the next iteration should be better understood than one which will not be implemented until the next release -- A user story is not a Use Case; although it is often useful to compare and contrast the two notions, they are not equivalent and do not admit a one-to-one mapping -- A user story does not in general correspond to a technical or user interface component: even though it may sometimes be a useful shortcut to talk about e.g. ""the search dialog story"", screens, dialog boxes and buttons are not user stories",https://www.agilealliance.org/glossary/user-stories/
10/5/2017,Julieta Jakubowicz,What are some common pitfalls when using the definition of done (DoD) checklist?,"The DoD can pose the following challenges: -- obsessing over the list of criteria can be counter-productive; don't let perfect be the enemy of good. -- Individual features or user stories may have specific Done criteria in addition to the ones that apply to work in general. -- If DoD is merely a shared understanding, rather than spelled out and displayed on a wall, it may lose much of its effectiveness; a good part of its value lies in being an explicit contract known to all members of the team. ",https://www.agilealliance.org/glossary/definition-of-done/
10/5/2017,Julieta Jakubowicz,What are the benefits of adopting Personas?,"In a nutshell, personas are an answer to the observation that a designer who tries to please everybody ends up pleasing nobody, because too many compromises kill the product's integrity. Instead, personas provide designers and developers with an anchor for justifying design choices: rather than appeal to vague notions of ""ease of use"", they suggest questions of ""what Amanda would do"" or ""whether Bob will understand"" a given feature, interaction, or visual cue. Because personas are part of the team's shared assumptions, each team member is made aware of the consequences of design choices. Knowing that the product will be used by ""Eileen, 72, retired"", a developer will weigh more accurately the consequences of filling up a modal dialog with 50 tiny dials and settings, which would not necessarily be the case if they thought in terms of ""the user"".",https://www.agilealliance.org/glossary/personas/
10/5/2017,Julieta Jakubowicz,What are the benefits of Stand-up (Daily Scrum)?,"the daily meeting prevents a common failure mode of teams, where in the absence of an explicit occasion to share recent information, some critical knowledge may sometimes ""fall through the cracks"" -- regular peer-to-peer sharing of information in a short, focused and energetic meeting also contributes to team cohesion -- stand-up meetings are reliably shorter, more pleasant and more effective than sit-down meetings",https://www.agilealliance.org/glossary/daily-meeting/
10/5/2017,Julieta Jakubowicz,What are the benefits of User Stories?,"For most Agile teams user stories are the main vehicle of incremental software delivery, and offer the following benefits: -- mitigating the risks of delayed feedback, all the more so -- if the increments are small -- if the software is released to production frequently -- for the customer or product owner, the option to change their mind on the details or the schedule priority of any user story not yet implemented -- for developers, being given clear and precise acceptance criteria, and ongoing feedback as they complete work -- promoting a clear separation of responsibilities between defining the ""what"" (province of the customer or product owner) and the ""how"" (province of the technical team), leveraging the skills and creativity of each",https://www.agilealliance.org/glossary/user-stories/
10/5/2017,Julieta Jakubowicz,What are the potential Costs of User Stories?,"Incremental development in general, and the ""nano-incremental"" strategy embodied in user stories in particular, has significant impacts on projects' testing strategies, and in particular all but mandates significant test automation. This follows from the so-called ""quadratic growth"" problem: after implementation of feature F1 it is normal to test that feature. After implementation of feature F2, the risk of regression dictates re-testing F1 as well as testing F2. A test sequence assuming incremental development therefore goes: F1,F1+F2,F1+F2+F3, etc. - this grows as the square of the number of features, and can therefore quickly become unmanageable as projects grow in size. Test automation (in particular unit and acceptance testing) mitigates this effect, although it does come at a cost.",https://www.agilealliance.org/glossary/user-stories/
10/5/2017,Julieta Jakubowicz,What are the twelve Principles of Agile?,"""1. Our highest priority is to satisfy the customer through early and continuous delivery of valuable software. 2. Welcome changing requirements, even late in development. Agile processes harness change for the customer's competitive advantage. 3. Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale. 4. Business people and developers must work together daily throughout the project. 5. Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done. 6. The most efficient and effective method of conveying information to and within a development team is face-to-face conversation. 7. Working software is the primary measure of progress. 8. Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely. 9. Continuous attention to technical excellence and good design enhances agility. 10. Simplicity--the art of maximizing the amount of work not done--is essential. 11. The best architectures, requirements, and designs emerge from self-organizing teams. 12. At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly.""",https://www.agilealliance.org/agile101/12-principles-behind-the-agile-manifesto/
10/5/2017,Julieta Jakubowicz,What is a Iterative Development?,"Agile projects are iterative insofar as they intentionally allow for ""repeating"" software development activities, and for potentially ""revisiting"" the same work products (the phrase ""planned rework"" is sometimes used; refactoring is a good example). They are iterative in a third, less essential sense, in being most often structured around a series of iterations of fixed calendar length. However, some Agile approaches to scheduling, such as Kanban do away with iterations in this later sense, but retain the other aspects of multiple repetitions and planned rework. Nearly all Agile projects are incremental as well as iterative. However, it is possible to use iterative strategies which are not also incremental; for instance, a ""build it twice"" strategy in which one first creates a throwaway prototype to gather user feedback, then uses insights from that experience to build the ""real thing"". Prototyping is necessarily an iterative strategy, and may have been a precursor to the development of iterative software development ideas.",https://www.agilealliance.org/glossary/iterative-development/
10/5/2017,Julieta Jakubowicz,What is a Milestone Retrospective?,"Once a project has been underway for some time, or at the end of the project (in that case, especially when the team is likely to work together again), all of the team's permanent members (not just the developers) invests from one to three days in a detailed analysis of the project's significant events. Even more than an iteration retrospective, this should be a facilitated meeting, adhering to a structured format which varies according to objectives but will be specified in advance. Also Known As: The terms ""project retrospective"" or ""interim retrospective"" are also used, the intent being to distinguish them from the iteration retrospective.",https://www.agilealliance.org/glossary/milestone-retrospective/
10/5/2017,Julieta Jakubowicz,What is a sample checklist for done?,All sub-tasks are complete. Work is recorded in JIRA. -- All code has been checked into the repository. -- All Acceptance Criteria are met. -- Functional testing (via peer review or QA test case execution) is complete. -- Performance testing against realistic set of test data is complete. -- Test automation suite was run with no failures. -- Relevant documentation updated. -- Product Owner has reviewed and accepted work in Test environment.,https://www.agilealliance.org/glossary/definition-of-done/
10/5/2017,Julieta Jakubowicz,What is a Sub-Task?,A Sub-Task is a granular decomposition of the work that: -- describes the technical work that needs to be completed to implement the Story -- is used for team coordination about 'what needs to get done?' and 'who is going to do it?' -- is measured in ���Hours�۝ but is also completely optional.,
10/5/2017,Julieta Jakubowicz,What is a Team?,"A ""team"" in the Agile sense is a small group of people, assigned to the same project or effort, nearly all of them on a full-time basis. A small minority of team members may be part-time contributors, or may have competing responsibilities. The notion of team entails shared accountability: good or bad, the outcomes should be attributed to the entire team rather than to any individual. The team is expected to possess all of the necessary competencies, whether technical (programming, designing, testing) or business (domain knowledge, decision making ability). Roles and responsibilities do not matter as much as results: a developer may test, perform analysis or think about requirements; an analyst or domain expert can suggest ideas about implementation, and so on.",https://www.agilealliance.org/glossary/team/
10/5/2017,Julieta Jakubowicz,What is a User Story?,"A User Story is a small unit of work that: -- delivers some business value to a 'customer' -- describes functionality (e.g., title could be exported directly as Release Notes) -- generally requires more than 1 day but less than a Sprint to implement -- is measured in 'Story Points'",https://www.agilealliance.org/glossary/user-stories/
10/5/2017,Julieta Jakubowicz,What is Agile?,"The ability to create and respond to change in order to succeed in an uncertain and turbulent environment. What is Agile Software Development?? Agile Software Development is an umbrella term for a set of methods and practices based on the values and principles expressed in the Agile Manifesto. Solutions evolve through collaboration between self-organizing, cross-functional teams utilizing the appropriate practices for their context.",https://www.agilealliance.org/agile101/
10/5/2017,Julieta Jakubowicz,What is an Epic?,An Epic is a large body of work that: -- will likely require more than one Sprint to complete -- includes a Business Need statement and Acceptance Criteria -- consists of multiple User Stories -- is measured in 'T-shirt Sizes' -- generally would be deployed as a new Feature,
10/5/2017,Julieta Jakubowicz,What is an example of a Subtask?,Build SQL query to return comments for target IP address.,
10/5/2017,Julieta Jakubowicz,What is an example of a User Story?,Title: Display Analyst IP Log Comments -- Story: Analyst should be able to see a log of all other Analyst comments associated with an IP to determine whether IP has previously been flagged as suspicious.,
10/5/2017,Julieta Jakubowicz,What is an example of an Epic?,Develop GUI to enable alert creation by analysts,
10/5/2017,Julieta Jakubowicz,What is an example of an Initiative?,Build a Next GenPR Platform,
10/5/2017,Julieta Jakubowicz,What is an Initiative?,An Initiative is a high-level business priority that: -- potentially spans multiple teams and multiple places -- consists of multiple Epics -- is measured in # of Quarter,
10/5/2017,Julieta Jakubowicz,What is Stand-up (Scrum)?,"Each day at the same time, the team meets so as to bring everyone up to date on the information that is vital for coordination: each team members briefly describes any ""completed"" contributions and any obstacles that stand in their way. Usually, Scrum's Three Questions are used to structure discussion. The meeting is normally held in front of the task board. This meeting is normally timeboxed to a maximum duration of 15 minutes, though this may need adjusting for larger teams. To keep the meeting short, any topic that starts a discussion is cut short, added to a ""parking lot"" list, and discussed in greater depth after the meeting, between the people affected by the issue. Also Known As -- the ""daily stand-up"": from Extreme Programming, which recommended participants stand up to encourage keeping the meeting short -- the ""daily scrum"": by reference to the name of the Scrum framework, and alluding to the huddle-like appearance of a rugby scrum (somewhat paradoxically: see the historical note below) -- the ""huddle"", ""roll-call"", or any number of variants",https://www.agilealliance.org/glossary/daily-meeting/
10/5/2017,Julieta Jakubowicz,What is the Agile Manifesto?,"""We are uncovering better ways of developing software by doing it and helping others do it. Through this work we have come to value: -- Individuals and interactions over processes and tools -- Working software over comprehensive documentation -- Customer collaboration over contract negotiation -- Responding to change over following a plan (That is, while there is value in the items on the right, we value the items on the left more)."" � 2001, the Agile Manifesto authors. This declaration may be freely copied in any form, but only in its entirety through this notice.",https://www.agilealliance.org/agile101/the-agile-manifesto/
10/5/2017,Julieta Jakubowicz,What is the checklist for a story to be ready?,"Business value is clearly articulated. -- Team sufficiently understands details so they can make an informed decision as to whether it can be completed. -- Dependencies are identified. No external dependencies would block the work from being completed. -- Team is staffed appropriately to complete the work. -- The work is estimated and small enough to comfortably be completed in one Sprint. -- Acceptance criteria are clear and testable. -- Performance criteria, if any, are defined and testable. -- Team understands how to demonstrate the work at the Sprint demo.",https://www.agilealliance.org/glossary/definition-of-ready/
10/5/2017,Julieta Jakubowicz,What is the definition of done (DoD)?,"""A checklist of the types of work that the team is expected to successfully complete by the end of the sprint, before it can declare its work to be potentially shippable. A bare-minimum definition of done should yield a complete slice of product functionality, one that has been designed, built, integrated, tested, and documented and will deliver validated customer value."" - Ken Rubins",https://www.agilealliance.org/glossary/definition-of-done/
10/5/2017,Julieta Jakubowicz,What is the definition of ready (DoR)?,The criteria a User Story should meet in order to maximize a team's ability to deliver that work by the end of a Sprint.,https://www.agilealliance.org/glossary/definition-of-ready/
10/5/2017,Julieta Jakubowicz,What is the history of Agile?,"In the late 1990's, several methodologies began to gain increasing public attention, each having a different combination of old and new ideas. These methodologies emphasized close collaboration between the development team and business stakeholders; frequent delivery of business value, tight, self-organizing teams; and smart ways to craft, confirm, and deliver code. The term ""Agile"" was applied to this collection of methodologies in early 2001 when 17 software development practitioners gathered in Snowbird, Utah to discuss their shared ideas and various approaches to software development. This joint collection of values and principles was expressed in the Manifesto for Agile Software Development and the corresponding twelve principles. The Agile Alliance was formed shortly after this gathering to encourage practitioners to further explore and share ideas and experiences. The Agile Alliance continues to curate resources to help you adopt Agile practices and improve your ability to develop software with agility.",https://www.agilealliance.org/agile101/
10/5/2017,Julieta Jakubowicz,What is the history of Iterative Development?,"The idea of iterative development predates Agile - by at least decade or two. --1984: an early empirical study by Barry Boehm of projects using prototyping, by essence an iterative strategy, suggests that iterative approaches first started receiving serious attention around that time, most probably driven by factors such as the rise of personal computers and graphical user interfaces --1986: in a well-known paper, Barry Boehm presents ""A Spiral model of software development and enhancement"", an iterative model geared to identifying and reducing risks through any appropriate approaches (though the ""typical"" example presented is based on prototyping) --1995: an article by Alistair Cockburn, ""Growth of human factors in application development"", suggests one major reason why iterative approaches gradually gain acceptance: the bottleneck in software development is shifting to (individual and organizational) learning, and human learning is intrinsically an iterative, trial and error process",https://www.agilealliance.org/glossary/iterative-development/
10/5/2017,Julieta Jakubowicz,What is the history of Personas?,"1999: personas are first described in one chapter of Alan Cooper's ""The Inmates are Running the Asylum"", building on prior work in ""Goal-Directed design"" -- 2002: an early practitioner's report discusses personas within the broader context: Jeff Patton's ""Hitting the Target: Adding Interaction Design to Agile Software Development"" is perhaps the first formal description in an Agile context, although the topic has been discussed informally on mailing lists since at least 2000 -- 2008: Alan Cooper's keynote at Agile 2008 marked a formal reconciliation, of sorts, between Agile discourse and interaction design, which had long been perceived to be at odds; invited by ""the Agile leadership"" as an ""outsider"", Cooper came to be perceived over the following year as very much an ""insider"".",https://www.agilealliance.org/glossary/personas/
10/5/2017,Julieta Jakubowicz,What is the history of Stand-up (Daily Scrum)?,"1993: Jim Coplien writes the original StandUp Meeting pattern. 1994: Jim Coplien, describing his observations of the ""hyperproductive"" Borland Quattro Pro team, notes their reliance on almost daily meetings: ""the project was made more of meetings than anything else""; this article is also cited as a strong influence on Scrum 1997: Ken Schwaber describes the ""daily scrum"" (which does not appear in his earlier writings, such as the 1995 article ""SCRUM Development Process""), this is later recast in pattern form by Mike Beedle 1998: the ""daily stand-up"" is listed as one of the core practices in Extreme Programming 2000,ca.: the ""three questions"" of Scrum's daily meeting format are largely adopted by Extreme Programming teams 2004-2006: the daily meeting is generalized as a core Agile practice, and with widespread use of task boards gains one final key guideline, ""hold the daily meeting near the task board"" (described for instance by Tobias Mayer)",https://www.agilealliance.org/glossary/daily-meeting/
10/5/2017,Julieta Jakubowicz,What is the history of User Stories?,"User Stories originate with Extreme Programming, their first written description in 1998 only claims that customers define project scope ""with user stories, which are like use cases"". Rather than offered as a distinct practice, they are described as one of the ""game pieces"" used in the ""planning game"". However, most of the thrust of further writing centers around all the ways user stories are ""unlike"" use cases, in trying to answer in a more practical manner ""how requirements are handled"" in Extreme Programming (and more generally Agile) projects. This drives the emergence, over the years, of a more sophisticated account of user stories.",https://www.agilealliance.org/glossary/user-stories/
10/5/2017,Julieta Jakubowicz,What is the JIRA Hierarchy?,"The JIRA hierarchy, top-down: An Initiative is broken down into Epics. Epics are broken down into User Stories. User Stories can have sub-tasks.",
10/5/2017,Julieta Jakubowicz,Why does the JIRA Hierarchy matter?,"Adopting the JIRA Hierarchy has the following advantages: -- it reduces noise in JIRA by differentiating between doing work (completing Sub-tasks) and delivering value (completing User Stories). -- it enables Roadmap development directly in JIRA. -- Provides consistency in sizing across all 3 PR teams. (Helps in transition to future Lean Kanban and 'no estimates' style approaches if desired). -- it streamlines stakeholder reporting. (e.g., User Story titles become Release Notes.) -- it helps non-technical stakeholders with prioritization when User Stories written in their language.",
10/5/2017,Julieta Jakubowicz,Why should I follow the definition of done (DoD)?,"The DoD checklist has the following advantages: -- it guides discussion about design, testing, and estimation. -- it limits the likelihood of forgetting to complete key activities that will later accumulate as technical debt. -- it limits the cost of rework once a feature had been accepted as ""done"". -- it reduces the risk of misunderstanding and conflict between the development team and the product owner.",https://www.agilealliance.org/glossary/definition-of-done/
10/5/2017,Julieta Jakubowicz,What is the best estimation approach?,All estimation approaches are wrong (but some are useful),
10/5/2017,Julieta Jakubowicz,What is the Planning Fallacy?,"A phenomenon in which predictions about how much time will be needed to complete a future task display an optimism bias and underestimate the time needed. In other words... it is a tendency for people and organizations to underestimate how long they will need to complete a task, even when they have experience of similar tasks over-running.",
10/5/2017,Julieta Jakubowicz,Who described the Planning Fallacy?,Daniel Kahneman discovered the Planning Fallacy in 1979.,
10/5/2017,Julieta Jakubowicz,What is some evidence of the Planning Fallacy?,"In a 1994 study, 37 psychology students were asked to estimate how long it would take to finish their senior theses. Estimates: -- Average estimate: 33.9 days -- How long if everything went as well as it possibly could: 27.4 days -- How long if everything went as poorly as it possibly could: 48.6 days. Actuals: -- Actual completion time: 55.5 days -- Only 30% completed the thesis in the amount of time predicted.",
10/5/2017,Julieta Jakubowicz,What is a story about the Planning Fallacy?,"""A recent example I've had was a task that the programmer promised he was going to finish in 2 days, I told him to be overly pessimistic, he said 2 weeks. The task was scheduled for 4 [weeks]. Now, after 5 weeks, the programmer says he's 2 days away from finishing."" - As told by Roger Buehler (another Social Psychology researcher)",
10/5/2017,Julieta Jakubowicz,What is a Story Point?,"Story Points are an arbitrary measure used to measure the effort required to complete work accounting for complexity, uncertainty, and risk. It is a relative unit of measurement and does not directly correlate to actual hours, because humans are better at relative sizing.",
10/5/2017,Julieta Jakubowicz,What are the benefits of using Story Points?,"Uses relative estimation technique. -- Quickly estimate large number of items without getting bogged down in technical details. -- Techniques like Planning Poker give everyone a voice. Discrepancies resolved quickly via meaningful conversations when needed. -- Effort including complexity, uncertainty, and risk rolled into a single number. -- Uses 'real' numbers so teams can define how much they typically finish in a Sprint. Can use historical velocity to anticipate future performance (or reserve capacity for unexpected issues, ongoing learning, side projects, etc.)",
10/5/2017,Julieta Jakubowicz,What are Nebulous Units of Time (NUTs)?,"Story Points are in a category of relative estimation approaches called 'Nebulous Units of Time' (NUTs). Other NUTs include: T-shirt sizing, Fruit Point estimation, Dog Point estimation. The use of Story Points is largely practical. It's easier to think in 'real' numbers to define a Sprint commitment.",
10/5/2017,Julieta Jakubowicz,Why go with points?,"The use of Story Points is largely practical. It's easier to think in 'real' numbers to define a Sprint commitment. Also, you get to avoid these conversations: ""How many Chihuahuas can we complete this Sprint if we also work on 2 Poodles, 3 Collies, and a Great Dane???""",
10/5/2017,Julieta Jakubowicz,What conditions must be met for Story Points to work well?,Story Points are not a magic bullet - they work best when: -- Teams are making team based commitments and not operating as individual performers. -- Work is general enough that more than one team member get it done. -- All team members have input when defining estimates. -- Strong facilitation by Scrum Master.-- A baseline(e.g. typical 3 Pointer) has been defined._Team members are relatively stable. -- Team members have done similar work in the past.,
10/5/2017,Julieta Jakubowicz,What are some potential obstacles to using Story Points?,"Watch out for the following team characteristics that can make adopting Story Points more challenging: -- Work is first assigned to an individual and then estimated based on that person doing the work. (Single point of failure.) -- Work is so specialized that only one person on team understand it well enough to estimate it. (Need cross-training.) -- Estimation with poor facilitation by Scrum Master, just one team member voting, or team members defer to most senior person -- Teams simply estimate in hours and then 'back into Story Point estimates. '4 hours is 2 Story Points'. (Planning Fallacy disguised.) -- Team has experienced high turnover.",
10/5/2017,Julieta Jakubowicz,How are Story Points estimated?,"Story Points are estimated by: Using Fibonacci sequence increments (1, 2, 3, 5, 8, 13, 21, etc...). Defining relative effort incorporating complexity, uncertainty, and risk. Using Planning Poker (or affinity estimation).",
10/5/2017,Julieta Jakubowicz,What is Planning Poker?,"How Planning Poker works: -- The Product Owner presents a User Story to the Development Team. -- Each member of the Development Team independently selects his/her Story Point estimate. -- On cue from the Scrum Master, each member shares his/her estimate with the rest of the team. -- Scrum Master facilitates conversation to achieve team concurrence. ",
10/5/2017,Julieta Jakubowicz,What are some tips for Planning Poker for Product Owners?,Your role is to present the User Stories and rely on the Dev Team to make estimates. Don't argue with the Dev Team about their estimates (but seeking opportunities to reduce effort is okay). You do NOT get to estimate. Poker cards are for Dev Team only,
10/5/2017,Julieta Jakubowicz,What are some tips for Planning Poker for Scrum Masters?,"Your role is to facilitate conversations to achieve convergence and maintain peace with unruly crowds. MUST be strong facilitator! Beware of anchoring effects. If outside experts are used on team, include them in process",
10/5/2017,Julieta Jakubowicz,What are some tips for Planning Poker for Developers?,Your role is to present your honest opinion and explain your rationale for your selection to the group. Don't get defensive. Same team! Seek clarification when needed.,
10/5/2017,Julieta Jakubowicz,When can I use Planning Poker?,"Planning Poker can be used at any time.(Backlog refinement, Sprint Planning, PI Planning, etc.)",
10/5/2017,Julieta Jakubowicz,Are Story Points useful?,They are only as useful as your efforts to baseline and analyze over time.,
10/5/2017,Julieta Jakubowicz,Can I compare the Velocity of two teams?,"Never compare the Velocity of one team with that of another. (each team has unique skills, availability, etc.",
10/5/2017,Julieta Jakubowicz,Should I worry if Velocity changes suddenly?,Velocity will change over time. Try to examine the reason for the change. You should be just as concerned with a Velocity that is always going up as you should with a Velocity that is always going down.,
10/5/2017,Julieta Jakubowicz,What is the Product backlog?,Product backlog is maintained by the project owner which contains every feature and requirement of the product.,http://www.softwaretestinghelp.com/25-best-agile-testing-interview-questions-and-answers/
10/5/2017,Julieta Jakubowicz,What is the Sprint Backlog?,Sprint backlog can be treated as subset of product backlog which contains features and requirements related to that particular sprint only.,http://www.softwaretestinghelp.com/25-best-agile-testing-interview-questions-and-answers/
10/5/2017,Julieta Jakubowicz,What is Velocity,Velocity is a metric that is calculated by addition of all efforts estimates associated with user stories completed in a iteration. It predicts how much work Agile can complete in a sprint and how much time will require to complete a project.,http://www.softwaretestinghelp.com/25-best-agile-testing-interview-questions-and-answers/
10/5/2017,Julieta Jakubowicz,What the difference between traditional Waterfall model and Agile testing?,"Agile testing is done parallel to the development activity whereas in traditional waterfall model testing is done at the end of the development. As done in parallel, agile testing is done on small features whereas in waterfall model testing is done on whole application.",http://www.softwaretestinghelp.com/25-best-agile-testing-interview-questions-and-answers/
10/5/2017,Julieta Jakubowicz,What is Pair Programming?,Pair programming is a technique in which two programmer works as team in which one programmer writes code and other one reviews that code. They both can switch their roles.,http://www.softwaretestinghelp.com/25-best-agile-testing-interview-questions-and-answers/
10/5/2017,Julieta Jakubowicz,What are the benefits of Pair Programming?,"Improved code quality: As second partner reviews the code simultaneously, it reduces the chances of mistake. Knowledge transfer is easy: One experience partner can teach other partner about the techniques and codes.",http://www.softwaretestinghelp.com/25-best-agile-testing-interview-questions-and-answers/
10/5/2017,Julieta Jakubowicz,What is Incremental Development?,Software is development in parts or increments. In each increment a portion of the complete requirement is delivered.,http://www.softwaretestinghelp.com/25-best-agile-testing-interview-questions-and-answers/
10/5/2017,Julieta Jakubowicz,How do you deal when requirements change frequently?,Work with PO to understand the exact requirement to update test cases. Also understand the risk in changing the requirement. Apart from this one should be able to write generic test plan and test cases. Don't go for the automation until requirements are finalized,http://www.softwaretestinghelp.com/25-best-agile-testing-interview-questions-and-answers/
10/5/2017,Julieta Jakubowicz,"What is difference between Epic, User stories & Tasks?",Epics > User Stories > (Sub)tasks. User Stories defines the actual business requirement. Generally created by Business owner. vs Task: To accomplish the business requirements development team create tasks. vs Epic: A group of related user stories is called an Epic.,http://www.softwaretestinghelp.com/25-best-agile-testing-interview-questions-and-answers/
10/5/2017,Julieta Jakubowicz,What is a Task board in Agile?,A task board is commonly referred to as a JIRA Board. Task board is dashboard which shows progress of the project. It contains some version of the following categories: User Story: which has the actual business requirement. To Do: Tasks that can be worked on. In Progress: Tasks in progress. To Verify: Tasks pending for verification or testing. Done: Completed tasks.,http://www.softwaretestinghelp.com/25-best-agile-testing-interview-questions-and-answers/
10/5/2017,Julieta Jakubowicz,How does QA contribute to the Agile team?,QA can provide a value addition by thinking differently about the various scenarios to test a story. They can provide quick feedback to the developers whether new functionality is working fine or not.,http://www.softwaretestinghelp.com/25-best-agile-testing-interview-questions-and-answers/
10/5/2017,Julieta Jakubowicz,What is the Zero Sprint?,"It can be added as pre step to the first sprint. Activities like setting development environment, preparing backlog etc needs to be done before starting of the first sprint and can be treated as Sprint zero.",http://www.softwaretestinghelp.com/25-best-agile-testing-interview-questions-and-answers/
10/5/2017,Julieta Jakubowicz,What is (Research) Spike?,There may be some technical issues or design problem in the project which needs to be resolved first. To provide the solution of these problem “Spikes” are created. Spikes are of two types- Functional and Technical.,http://www.softwaretestinghelp.com/25-best-agile-testing-interview-questions-and-answers/
10/5/2017,Julieta Jakubowicz,How the velocity of sprint is measured?,If capacity is measured as a percentage of a 40 hours weeks then completed Story Points * team capacity. If capacity is measured in man hours then Completed Story Points / team capacity,http://www.softwaretestinghelp.com/25-best-agile-testing-interview-questions-and-answers/
10/5/2017,Julieta Jakubowicz,What are the Three Questions of Daily Stand-up?,"The daily meeting is structured around some variant of the following three questions: What have you completed since the last meeting? What do you plan to complete by the next meeting? What is getting in your way? The intent of these questions is to emphasize completions of tasks, rather than effort spent. While it is common to hear ""yesterday I worked on X... today I will continue working on X... everything's fine"", this is a mistake (hilariously caricatured as the ""Scrum Zombie"" pattern); it is better to say ""I pass"". Having a clear definition of done may help overcome this.",https://www.agilealliance.org/glossary/three-qs/#q=~(filters~(postType~(~'page~'post~'aa_book~'aa_event_session~'aa_experience_report~'aa_glossary~'aa_research_paper~'aa_video)~tags~(~'three*20questions))~searchTerm~'~sort~false~sortDirection~'asc~page~1)
1/5/2012,Forum,What is the difference between the 'Fix version' and 'Affect version' for a Story?,"""Affects version is where you found the problem. Fix version is where you plan to fix it, or where it has been fixed (depending on your process). Affects version is not heavily used - it's very useful for what it does, but there's not a huge amount of useful reporting you can do on it beyond the basic ""where did it break"" or ""how many bugs did this version contain"" questions. Fix versions however, is for planning, releases, tracking velocity, monitoring progress, as well as it's core ""it was fixed in"" intent, and others, so it's used in a lot more of the widgets and reports. Try Greenhopper/Agile on a project where it's disabled, and you'll find 90% of it doesn't do much! Leave ""Fix Version"" blank for ""it is not planned to fix it, yet"" or ""it has not been determined(reviewed) whether to fix it or not."" (depending on your process)",https://community.atlassian.com/t5/Questions/Difference-between-fix-version-and-affects-version/qaq-p/353456
3/2/2016,Carlton Nettleton,What is an Impediment?,"""An impediment is anything that slows down or diminishes the pace of the Team. When the Team is confronted with impediments (or obstacles), the Team could move forward but in advancing they may generate waste. Or the whole process of making progress is more difficult than it should be.""",https://lookforwardconsulting.com/2016/03/02/impediments-vs-blockers-why-make-the-distinction/
3/2/2016,Carlton Nettleton,What is a Blocker?,"""A blocker is anything that stops the delivery of the product. Without the elimination of the blocker, the Team cannot advance at all.""",https://lookforwardconsulting.com/2016/03/02/impediments-vs-blockers-why-make-the-distinction/
3/2/2016,Carlton Nettleton,What are some challenges when trying to use Blockers?,"""Clearly, eliminating blockers is more important than resolving impediments, but what is the reality for most Scrum Teams when confronted with a blocker? Since Team members are generally conscientious and want to make a full contribution each day, they often will switch to a new task in order to make progress on a new activity. They would rather start something new, i.e. multitask, than take time identify, escalate and eliminate the blocker. This is why you often hear Team members say in the Daily Scrum, “No blockers.” Lights So why do people say they have “no blockers” when they do have one (or more) blocker(s)? Well…from their perspective they do not have a blocker anymore. By starting something new, they have demoted the blocker (in their mind) to an impediment since they are making progress on something. IME, I have seen people in big organizations becomes so accustomed to blockers not being fixed around, they assume that multitasking is just the normal way of working. They just do not see that the light is red anymore. The second reason is related to the person’s proficiency at asking for help. The person in question does not know how to ask for help or they do not know who to ask. That is sad because on Scrum Teams, Team members have the right to ask for AND receive help from their peers, management and customers. If you have a blocker, bring it up at once. Do not wait until the next Daily Scrum to resolve it. Most blockers are really hard to eliminate on your own, so find another Team member, the Product Owner or the ScrumMaster to help you eliminate it. Chances are that you are not the only person experiencing the blocker, so people will have an interest in helping you stamp it out. If not, a serious blocker will become this irritating impediment that slows everyone down.""",https://lookforwardconsulting.com/2016/03/02/impediments-vs-blockers-why-make-the-distinction/
8/28/2017,Carlton Nettleton,Should documentation be a separate story?,"""Remember our key Agile principles related to documentation: “working software is the primary measure of progress” and “the most efficient and effective method of conveying information to and within a development team is face-to-face conversation.” "" do NOT recommend having a separate user story for writing documents for multiple reasons. One, by definition user stories describe how working software solves a problem, or fulfills a need, for a user. Documents are not software. Two, every user story must be something you can demonstrate. So how do you demonstrate a document to a user again? Three, a user story needs to be something valuable in the eyes of the user. Certain types of documents, like those specified in a contract or required for statutory reasons, would be considered valuable, but for the most part documents are considered a waste. Another way to track manage documentation would be through the Definition of Done (DoD). Since the goal every Agile process is to have shippable software at the completion of each iteration, that means in addition to new functionality, the software needs to be appropriately documented. Use the DoD to be 100% clear about what are the documentation requirements in order to say a feature is potentially shippable. Any feature that does not meet the DoD is not allowed to be demonstrated. Finally, there are no iterations (or Sprints) to create the documentation since that would break the rule that every iteration needs to deliver working software. If a document is needed, I recommend creating it along side with the feature. Remember, most of the technical documentation is contained either in the code or the automated tests. Any other required documentation would be created just-in-time as the feature is close to being completed. I often recommend including the formal review of the documentation (if needed for your product) as part of the acceptance criteria for the feature.
We need to remember that working software is the primary measure of progress of the Agile team.""",https://lookforwardconsulting.com/2017/08/28/manage-documents-new-story/
4/29/2017,Carlton Nettleton,What books can I read on scaling Scrum and Agile?,"""Lean from the Trenches: Managing Large-Scale Projects with Kanban"" by Henrick Kniberg), and ""Large-Scale Scrum: Get More with LeSS"" by Craig Larman & Bas Vodde.",https://lookforwardconsulting.com/2017/04/29/books-recommend-reading-scaling-scrum-agile/
10/5/2017,Scrum Institute,What kind of software development projects can be executed by Scrum Project Management Framework?,All kinds of software development projects, http://www.scrum-institute.org/Example_Scrum_Certification_Test_Questions.php
10/5/2017,Scrum Institute,Where are the customer requirements stored?,Customer Requirements are captured in the Product Backlog,http://www.scrum-institute.org/Example_Scrum_Certification_Test_Questions.php
10/5/2017,Scrum Institute,What are some disadvantages of the Waterfall Model?,"According to the Scrum Institute, some disadvantages of the waterfall model are: -- End-Product has to be fully anticipated beforehand. -- Some requirements are implemented as defined in the beginning of the project, and yet they are not really needed by the customer. -- Each phase is strictly separated.",http://www.scrum-institute.org/Example_Scrum_Certification_Test_Questions.php
10/5/2017,Scrum Institute,What are the advantages of the Scrum Framework?,"According to the Scrum Institute, the advantages of the Scrum Framework are: -- Fine-grained requirements are only defined when they are really needed. -- All activities to design, build and test a certain functionality are kept together in one phase. -- Changes are expected and welcomed by Scrum team. -- All of the given answers -- None of the given answers",http://www.scrum-institute.org/Example_Scrum_Certification_Test_Questions.php
10/5/2017,Agile Alliance,What is Velocity?,"At the end of each iteration, the team adds up effort estimates associated with user stories that were completed during that iteration. This total is called velocity. Knowing velocity, the team can compute (or revise) an estimate of how long the project will take to complete, based on the estimates associated with remaining user stories and assuming that velocity over the remaining iterations will remain approximately the same. This is generally an accurate prediction, even though rarely a precise one.",https://www.agilealliance.org/glossary/velocity/
10/5/2017,Agile Alliance,What are the benefits of using Velocity?,"""Worked example:"" an agile team has started work on an iteration, planning to complete stories A and B, estimated at 2 points each, and story C, estimated at 3 points. At the end of the iteration, stories A and B are 100% complete but C is only 80% complete. Agile teams generally acknowledge only two levels of completion, 0% done or 100% done. Therefore, C is not counted toward velocity, and velocity as of that iteration is 4 points. Suppose the user stories remaining represent a total of 40 points; the team's forecast of the remaining effort for the project is then 10 iterations. Velocity is also used to limit the amount of work taken on in further iterations. In our example, the team would be well advised to plan for only 4 points' worth of stories in the next iteration. This doesn't necessarily mean it will complete only that much; in fact, completing story C in the next iteration might mean that the team's velocity will, on the contrary, be much higher. Agile teams consider both kinds of events a warning sign: failing to bring a story to completion ""or"" seeing their velocity ""see-sawing"". The expected response is to seek a finer-grained decomposition of stories. Velocity thus serves in a few different ways as a regulation mechanism.",https://www.agilealliance.org/glossary/velocity/
10/5/2017,Agile Alliance,What are some of the pitfalls of using Velocity?,"-- velocity is a ""measurement"", made after the fact; though it can help plan ahead, it is not itself a budget or a forecast, and phrases such as ""setting the velocity"" reveal basic misunderstanding -- velocity is defined with respect to units of value (user stories) rather than with respect to units of effort (tasks) -- only the aggregate velocity of the team matters, and the phrase ""individual velocity"" is meaningless; a team is a mechanism intended to yield more than the sum of its individual parts -- there is no meaningful comparison of velocity ""between"" different teams, since such teams may have different approaches to estimation -- in order that velocity provide forecasts of the project's end date, it is necessary that all of the user stories making up the project be estimated in a consistent manner; this can be achieved in one of two main ways: -- estimate the entire set of user stories before the project starts, or early on, such as in the first few iterations; -- use relative estimation to ensure that estimates made later on are consistent with the ones made at the start of the project",https://www.agilealliance.org/glossary/velocity/
10/5/2017,Agile Alliance,What is the origin of the term Velocity?,"""Velocity"" may be one of the best illustrations that concepts in Agile discourse do not appear full-blown but are worked out over a period of time. Early texts (such as ""Planning Extreme Programming"") were generally favorable to measuring ""individual velocity"", a practice which fell into disrepute over the next few years. ""Story points"" became the most widespread unit of estimation, displacing ""ideal weeks"". These changes, hashed out over mailing lists, Usenet and other fora, are sometimes difficult to pinpoint in time, and only clear in retrospect. 2000: the term ""velocity"" is a relatively late addition to Extreme Programming, replacing a previous notion of ""load factor"" deemed overly complex 2002: the Scrum community picks up the practice of measuring ""velocity""",https://www.agilealliance.org/glossary/velocity/
10/5/2017,Agile Alliance,Why do we use Versions?,"Version control is not strictly speaking an Agile ""practice"" insofar as it is now (fortunately) widespread in the industry as a whole. It must however be mentioned here for several reasons: -- Though they are rare, one still occasionally stumbles across teams with outdated version control tools or practices, and even teams who haven't adopted version control tools at all -- Version control is not merely ""good practice"" but an enabler of a number of Agile practices, such as continuous integration -- The Agile community leans toward particular types of tools and practices, namely the same as the Open Source community: systems that afford concurrent work (""merge"" model rather than ""lock""), and more recently favoring distributed over centralized models -- It is therefore beneficial for an Agile team to explicitly reflect on its version control policies and infrastructure, and ensure that they and its engineering practices work harmoniously together.",https://www.agilealliance.org/glossary/version-control/
10/5/2017,Agile Alliance,What is Usability Testing?,"Usability testing is a long-established, empirical and exploratory technique to answer questions such as ""how would an end user respond to our software under realistic conditions?"" It consists of observing a representative end user interacting with the product, given a goal to reach but no specific instructions for using the product. (For instance, a goal for usability testing of a furniture retailer's Web site might be ""You've just moved and need to do something about your two boxes of books; use the site to find a solution."") Members of the team (possibly including usability specialists) observe the user's actions without intervening, recording what transpires (either informally, e.g. taking notes, or more comprehensively, using video, eye-tracking, screen captures or specialized software). Post-test analysis will focus on any difficulties encountered by the user, illustrating differences between the team's assumptions and actual behaviour.",https://www.agilealliance.org/glossary/usability/
10/5/2017,Agile Alliance,Where does Usability Testing come from?,"Usability testing is not strictly speaking an Agile practice, but has attracted much attention since 2008 and is representative of a trend to incorporate into Agile practice ideas from the ""UX"" community (user experience design). 1983: a wide range of ""human factors testing"" techniques foreshadowing usability testing, used at the Xerox PARC during the design of the Xerox Star, are described in the CHI conference proceedings. 2008: the Agile 2008 conference features a stage dedicated to discussion of ""User Experience"" practices, such as usability testing, personas or paper prototyping.",https://www.agilealliance.org/glossary/usability/
10/5/2017,Agile Alliance,What is a Unit Test?,"A unit test, as Agile teams understand the term, is a short program fragment written and maintained by the developers on the product team, which exercises some narrow part of the product's source code and checks the results. The outcome of a unit test is binary: either ""pass"" if the program's behavior is consistent with the recorded expectations, or ""fail"" otherwise. Developers will typically write a large number of unit tests (corresponding to a large number of program behaviors of interest), called a ""test suite"". By common convention dating back at least to the JUnit family of tools, the color red (as in ""getting a red bar"") represents the failure of one or more tests. The color green (""a green bar"") denotes successful execution of ""all"" unit tests associated with a program.",https://www.agilealliance.org/glossary/unit-test/
10/5/2017,Agile Alliance,Why use Unit Tests?,"A team relying on automated unit tests can expect to reap some of the benefits of test-driven development, in particular a decrease in defect rates",https://www.agilealliance.org/glossary/unit-test/
10/5/2017,Agile Alliance,What is a Time Box?,"A timebox is a previously agreed period of time during which a person or a team works steadily towards completion of some goal. Rather than allow work to continue until the goal is reached, and evaluating the time taken, the timebox approach consists of stopping work when the time limit is reached and evaluating what was accomplished.",https://www.agilealliance.org/glossary/timebox/
10/5/2017,Agile Alliance,How long is a Time Box?,"Timeboxes can be used at varying time scales. The ""pomodoro technique"" organizes personal work around 25-minute timeboxes. In a completely different domain ""speed dating"" is known for its seven-minute timeboxes. Time scales ranging from one day to several months have been used.",https://www.agilealliance.org/glossary/timebox/
10/5/2017,Agile Alliance,When is a Time Box complete?,"The critical rule of timeboxed work is that work should stop at the end of the timebox, and review progress: has the goal been met, or partially met if it included multiple tasks?",https://www.agilealliance.org/glossary/timebox/
10/5/2017,Agile Alliance,What is the origin of Time Boxes?,"Timeboxed iterations are a distinctive feature of the early Agile approaches, notably Scrum and Extreme Programming, but they have an earlier history:1988: the ""timebox"" is described as a cornerstone of Scott Schultz's ""Rapid Iterative Production Prototyping"" approach in use at a Du Pont spin-off, Information Engineering Associates. 1991: the details of the ""timebox"" are described at length in one chapter of James Martin's ""Rapid Application Development""",https://www.agilealliance.org/glossary/timebox/
10/18,Matthew Houltry,What is an example of an Initiative?,An example of an initiative us: “Build “Next Gen” PR Platform”,
10/18,Agile Alliance,What’s the INVEST method for User Stories?,"The INVEST method means that Stories should be: I - Independent, N - Negotiable, V - Valuable, E - Estimable, S - Small, T - Testable",
10/18,Agile Alliance,What’s the SMART method for Sub-Tasks?,"The SMART method means that Sub-Tasks should be: S - Specific, M - Measurable, A - Achievable, R - Relevant, T - Time-boxed",
10/18,Agile Alliance,What does Independent mean?,"Independent if part of the INVEST method. Stories are easiest to work with if they are independent. That is, we'd like them to not overlap in concept, and we'd like to be able to schedule and implement them in any order. We can't always achieve this; once in a while we may say things like ""3 points for the first report, then 1 point for each of the others.""",
10/18,Agile Alliance,What does Negotiable mean?,"Negotiable if part of the INVEST method. Negotiable... and Negotiated. A good story is negotiable. It is not an explicit contract for features; rather, details will be co-created by the customer and programmer during development. A good story captures the essence, not the details. Over time, the card may acquire notes, test ideas, and so on, but we don't need these to prioritize or schedule stories.",
10/18,Agile Alliance,What does Valuable mean?,"Valuable if part of the INVEST method. A story needs to be valuable. We don't care about value to just anybody; it needs to be valuable to the customer. Developers may have (legitimate) concerns, but these framed in a way that makes the customer perceive them as important. This is especially an issue when splitting stories. Think of a whole story as a multi-layer cake, e.g., a network layer, a persistence layer, a logic layer, and a presentation layer. When we split a story, we're serving up only part of that cake. We want to give the customer the essence of the whole cake, and the best way is to slice vertically through the layers. Developers often have an inclination to work on only one layer at a time (and get it ""right""); but a full database layer (for example) has little value to the customer if there's no presentation layer. Making each slice valuable to the customer supports XP's pay-as-you-go attitude toward infrastructure",
10/18,Agile Alliance,What does Estimable mean?,"Estimable if part of the INVEST method. A good story can be estimated. We don't need an exact estimate, but just enough to help the customer rank and schedule the story's implementation. Being estimable is partly a function of being negotiated, as it's hard to estimate a story we don't understand. It is also a function of size: bigger stories are harder to estimate. Finally, it's a function of the team: what's easy to estimate will vary depending on the team's experience. (Sometimes a team may have to split a story into a (time-boxed) ""spike"" that will give the team enough information to make a decent estimate, and the rest of the story that will actually implement the desired feature.)",
10/18,Agile Alliance,What does Small mean?,"Small if part of the INVEST method. Good stories tend to be small. Stories typically represent at most a few person-weeks worth of work. (Some teams restrict them to a few person-days of work.) Above this size, and it seems to be too hard to know what's in the story's scope. Saying, ""it would take me more than month"" often implicitly adds, ""as I don't understand what-all it would entail."" Smaller stories tend to get more accurate estimates. Story descriptions can be small too (and putting them on an index card helps make that happen). Alistair Cockburn described the cards as tokens promising a future conversation. Remember, the details can be elaborated through conversations with the customer.",
10/18,Agile Alliance,What does Testable mean?,"Testable if part of the INVEST method. A good story is testable. Writing a story card carries an implicit promise: ""I understand what I want well enough that I could write a test for it."" Several teams have reported that by requiring customer tests before implementing a story, the team is more productive. ""Testability"" has always been a characteristic of good requirements; actually writing the tests early helps us know whether this goal is met. If a customer doesn't know how to test something, this may indicate that the story isn't clear enough, or that it doesn't reflect something valuable to them, or that the customer just needs help in testing. A team can treat non-functional requirements (such as performance and usability) as things that need to be tested. Figure out how to operationalize these tests will help the team learn the true needs.",
10/18,Agile Alliance,What does Specific mean?,"Specific is part of the SMART method. A task needs to be specific enough that everyone can understand what's involved in it. This helps keep other tasks from overlapping, and helps people understand whether the tasks add up to the full story.",
10/18,Agile Alliance,What does Measurable mean?,"Measurable is part of the SMART method. The key measure is, ""can we mark it as done?"" The team needs to agree on what that means, but it should include ""does what it is intended to,"" ""tests are included,"" and ""the code has been refactored.""",
10/18,Agile Alliance,What does Achievable mean?,Achievable is part of the SMART method. The task owner should expect to be able to achieve a task. XP teams have a rule that anybody can ask for help whenever they need it; this certainly includes ensuring that task owners are up to the job.,
10/18,Agile Alliance,What does Relevant mean?,"Relevant is part of the SMART method. Every task should be relevant, contributing to the story at hand. Stories are broken into tasks for the benefit of developers, but a customer should still be able to expect that every task can be explained and justified.",
10/18,Agile Alliance,What does Time-Boxed mean?,"Time-Boxed is part of the SMART method. A task should be time-boxed: limited to a specific duration. This doesn't need to be a formal estimate in hours or days, but there should be an expectation so people know when they should seek help. If a task is harder than expected, the team needs to know it must split the task, change players, or do something to help the task (and story) get done.",